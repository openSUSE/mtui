from logging import getLogger
import re

from mtui.commands import Command
from mtui.utils import page, requires_update


logger = getLogger("mtui.commands.showdiff")


class ShowDiff(Command):
    """
    Show packages diff generated by OBS
    """

    command = "show_diff"

    @requires_update
    def __call__(self):

        diff = self.metadata.report_wd() / "source.diff"
        text = diff.read_text().split("\n")
        page(text, self.prompt.interactive)


class AnalyzeDiff(Command):
    """
    Check source diff for patches
    """

    command = "analyze_diff"

    @requires_update
    def __call__(self):

        patchdef = re.compile(r"[+-]Patch(\d*):\s+(.*\.patch)$", flags=re.M)
        patchapply = re.compile(r"[+-]%patch(\d+|)\s+(?:-p\d*|)", flags=re.M)

        diff = self.metadata.report_wd() / "source.diff"
        text = diff.read_text()

        changes = text.split("\n")
        try:
            changes = changes[: changes.index("spec files:")]
        except ValueError:
            self.prompt.println("No spec mentioned in source.diff")
            return

        changes = "\n".join(
            ch for ch in changes if ch.startswith("+") or ch.startswith("-")
        )

        spec_patches = sorted(re.findall(patchdef, text))
        spec_apply = sorted(re.findall(patchapply, text))

        if spec_apply == [x[0] for x in spec_patches]:
            logger.warning(
                "Patches changes found in spec files arent same as application"
                + "of patches\n It can be false warning if is used %autosetup"
                + "macro or other \n more complicated way to apply patches ,eg"
                + " kernel packages\n"
            )

        changes_patches = []
        for patch in (x[1] for x in spec_patches):
            match = re.search(patch, changes)
            if not match:
                logger.warning("Patch %s isn't mentioned in any changelog" % patch)
            else:
                changes_patches.append(patch)

        self.prompt.println("Patches in source.diff:")
        self.prompt.println("  Mentioned in spec file:")
        for i, p in enumerate(x[1] for x in spec_patches):
            self.prompt.println(f"    {i} - {p}")
        self.prompt.println()
        self.prompt.println("  Mentioned in changelog:")
        for i, p in enumerate(changes_patches):
            self.prompt.println(f"    {i} - {p}")
